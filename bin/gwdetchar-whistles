#!/usr/bin/env python
# coding=utf-8
# Copyright (C) LIGO Scientific Collaboration (2015-)
#
# This file is part of the GW DetChar python package.
#
# GW DetChar is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GW DetChar is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GW DetChar.  If not, see <http://www.gnu.org/licenses/>.

"""Search for evidence of beam scattering based on optic velocity
"""

from __future__ import division

import os.path
import re
import warnings
from collections import OrderedDict
from gwtrigfind import find_trigger_files
from matplotlib import (use, rcParams)
use('agg')  # nopep8
try:
	import configparser
except ImportError:
	import ConfigParser as configparser

try:
    from LDAStools import frameCPP
except ImportError:
    io_kw = {'format': 'gwf'}
else:
    io_kw = {'type': 'adc', 'format': 'gwf.framecpp'}
    
from gwdetchar import (cli, const, scattering, __version__)
from gwpy.segments import (DataQualityFlag, DataQualityDict,
                           Segment, SegmentList)
    
    
# update rcParams
rcParams.update({
    'axes.labelsize': 20,
    'figure.subplot.bottom': 0.17,
    'figure.subplot.left': 0.1,
    'figure.subplot.right': 0.9,
    'figure.subplot.top': 0.90,
    'grid.color': 'gray',
    'image.cmap': 'viridis',
    'svg.fonttype': 'none',
})


# Read command line options
parser = cli.create_parser(description=__doc__)
cli.add_gps_start_stop_arguments(parser)
parser.add_argument('config-file', type=str, help='Config file for the analysis', 
										default='/home/sudarshan.ghonge/Projects/whistles/L1_whistle_default.ini')
parser.add_argument('-o', '--output-dir', type=str, default=os.curdir, 
										help='Output directory to post all the results of the analysis')
parser.add_argument('-p', '--padding', type=str, default=8,
										help='Add padding to the VCO fetch to accommodate the possible time lag between
										IMC-F and VCO')
parser.add_argument('-m', '--no-imcf', action='store_true', 
										help='Skip the fitting with IMC-F step', default=False)
parser.add_argument('-d', '--detrend', choices=['linear', 'constant'], default='constant')
cli.add_nproc_option(parser)

args = parser.parse_args()

# Load command line options
config_file = args.config_file
gpsstart = args.gpsstart
gpsend = args.gpsend
nproc = args.nproc

# Read config file
cp = configparser.read(args.config_file)
flag = cp.get('general', 'flag')
ifo = cp.get('general', 'ifo')
obs = ifo[0]
channels = config.get('general', 'channels')
padding = args.paddding
detrend = args.detrend

state = DataQualityFlag.query(flag, int(gpsstart),
                                  int(gpsend), url=const.O1_SEGMENT_SERVER)


# Start html

page = htmlio.new_bootstrap_page(title='%s scattering' % args.ifo)
page.div(class_='container')
page.div(class_='page-header')
page.h1('%s scattering: %d-%d'
        % (args.ifo, int(args.gpsstart), int(args.gpsend)))
page.p("This analysis looks for whistles in the data using a technique developed by Patrick Meyers.")
page.div.close()

# link XML file
# print state segments
page.p('This analysis was executed over the following segments:')
page.div(class_='panel-group', id_='accordion1')
page.add(str(htmlio.write_flag_html(state, 'state', parent='accordion1',
                                        context='success', id='state')))
page.div.close()

for seg in state.active:
	vco_signal, vco_pred = whistles.get_vco_timeseries(ifo, seg[0]-padding, seg[1]+padding, fit_imcf=~no_imcf, **io_kw )
	detrend_func = whistles.vco_detrend(vco_pred, detrend)
	vco_after_detrend = vco_pred - detrend_func(vco_pred.times.value)
		
	
	for chan in channels:
		tag = '%s-%d-%d'%(chan, seg[0], seg[1])
		cache = find_trigger_files(chan, 'omicron', seg[0], seg[1])
		tab = EventTable.read(cache, format='ligolw.sngl_burst')
		peak_times = tab['peak_time'] + tab['peak_time_ns']*1e-9
		tab['vco_fluc_value'] = whistles.get_trigger_vco_value(vco_pred, peak_times, fit_imcf=~no_imcf)
		
		hist_trigger_vco, be = np.histogram(tab['vco_fluc_value'], bins=100)
		hist_overall_vco, be = np.histogram(vco_after_detrend, bins=be)
		bcs = (be[1:	] + be[:-1])/2
		
		whistles.write_histogram('%s-HISTOGRAMS'%tag, bin_centers=bcs, hist_trigger_vco, hist_overall_vco, detrend_func)
	





		
		
		
		
